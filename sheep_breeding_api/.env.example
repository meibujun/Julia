# Flask App Configuration
FLASK_ENV="development" # Or "production"
FLASK_APP="app.py" # Or your entry point
FLASK_SECRET_KEY="your_very_secret_flask_key_here_please_change_me" # IMPORTANT: Change this for any deployment
API_KEY="your_secure_api_key_here_please_change_me"           # IMPORTANT: Change this for any deployment

# Redis Configuration (for both Flask app's redis_client and Celery broker/backend)
REDIS_HOST="localhost"
REDIS_PORT="6379"
# REDIS_DB_API="0" # Optional: Specify if Flask's Redis client uses a different DB than Celery
# REDIS_DB_CELERY="0" # Optional: Specify if Celery uses a different DB

# Celery Configuration (if broker/backend URLs are not directly derived from above in celery_app.py)
# CELERY_BROKER_URL="redis://localhost:6379/0" # Example if directly setting
# CELERY_RESULT_BACKEND="redis://localhost:6379/0" # Example if directly setting


# --- Notes ---
# To use this file:
# 1. Copy it to a new file named ".env" in the same directory (sheep_breeding_api/).
#    The .env file should typically be added to .gitignore to prevent committing secrets.
# 2. Replace the placeholder values with your actual configuration values.
# 3. To load these environment variables when running the Flask app or Celery worker:
#    - You can manually source them in your shell: `export $(cat .env | xargs)` (Linux/macOS)
#    - Or, use a library like `python-dotenv`. If you add `python-dotenv` to requirements.txt,
#      you can add `from dotenv import load_dotenv; load_dotenv()` at the beginning of app.py and celery_app.py.
#      This is convenient for development. For production, setting environment variables directly in the deployment
#      environment is often preferred.

# For FLASK_ENV:
# - "development" enables debug mode, reloader, etc.
# - "production" typically disables debug mode and is optimized for performance. Check Flask docs.
#   The API key check in app.py uses FLASK_ENV="production" to warn about default keys.

# Ensure Redis server is running and accessible with the specified host/port.
# Ensure Celery workers are started with access to these environment variables if they derive their
# broker/backend URLs from them (as implemented in celery_app.py).
